import socket
import zlib
import json
import sys
import unittest
from unittest.mock import patch
from io import StringIO

def get_first_length(data):
    """Get the length of the first part of the response, including the header and the content if Content-Length is present."""
    # Split headers and body
    parts = data.split('\r\n\r\n', 1)
    header_part = parts[0]
    header_length = len(header_part) + 4  # +4 for \r\n\r\n
    
    # Look for Content-Length in headers
    content_length = 0
    for line in header_part.split('\r\n'):
        if line.lower().startswith('content-length:'):
            content_length = int(line.split(':', 1)[1].strip())
            break
    
    return header_length + int(content_length)  

def create_socket():
    """Create a client socket and connect to the server."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(('localhost', 8080))
    return sock

def client():
    """Send a GET request to the server and print the response."""
    # Create socket and Send the request
    sock = create_socket()
    request = "GET /index.html HTTP/1.1\r\nHost: localhost\r\n\r\n"
    sock.sendall(request.encode())

    # Receive the response
    response_data = b""
    while True:
        # Receive data
        data = sock.recv(1024)

        # Break if no more data
        if not data:
            break
        
        response_data += data
        
        # Check if we have received the complete response
        if b'\r\n\r\n' in response_data:
            response_str = response_data.decode()
            expected_length = get_first_length(response_str)
            if len(response_data) >= expected_length:
                break

    # Decode and Print the response
    response = response_data.decode()
    print(response)

    # Get the status code
    status_line = response.split('\r\n')[0]
    status_code = int(status_line.split(' ')[1])

    # Print the status code
    if status_code == 200:
        print("Status: 200 OK")
    elif status_code == 404:
        print("Status: 404 Not Found")
    elif status_code == 500:
        print("Status: 500 Internal Server Error")

    # Close the socket 
    sock.close()

    # Decompress and parse JSON content
    # Split headers and body
    parts = response.split('\r\n\r\n', 1)
    if len(parts) > 1:
        compressed_body = parts[1].encode()
        try:
            # Decompress the body
            decompressed_body = zlib.decompress(compressed_body)
            # Parse JSON
            json_data = json.loads(decompressed_body.decode())
            print(f"Status: {json_data.get('status', 'Unknown')}")
            print(f"Message: {json_data.get('message', 'No message')}")
        except (zlib.error, json.JSONDecodeError) as e:
            print(f"Error processing response body: {e}")

# A 'null' stream that discards anything written to it
class NullWriter(StringIO):
    def write(self, txt):
        pass

def assert_equal(parameter1, parameter2):
    if parameter1 == parameter2:
        print(f'test attribute passed: {parameter1} is equal to {parameter2}')
    else:
        print(f'test attribute failed: {parameter1} is not equal to {parameter2}')

class TestHttpClient(unittest.TestCase):
    def test_get_first_length_no_content_length(self):
        print('Testing get_first_length_no_content_length ...')
        data = "HTTP/1.1 200 OK\r\nServer: TestServer\r\n\r\n"
        assert_equal(get_first_length(data), len(data.split('\r\n\r\n')[0]))

    def test_get_first_length_with_content_length(self):
        print('Testing get_first_length_with_content_length ...')
        data = "HTTP/1.1 200 OK\r\nContent-Length: 5\r\n\r\n12345"
        assert_equal(get_first_length(data), len(data.split('\r\n\r\n')[0]) + 5)

    @patch('socket.socket')
    def test_create_socket(self, mock_socket):
        print('Testing create_socket ...')
        create_socket()
        mock_socket.assert_called_once_with(socket.AF_INET, socket.SOCK_STREAM)
        instance = mock_socket.return_value
        instance.connect.assert_called_once_with(('localhost', 8080))
        print(f"connect called with: {instance.connect.call_args}")

if __name__ == '__main__':
    if len(sys.argv) == 2 and sys.argv[1] == 'run':
        client()

    # run unit test to test locally
    # or for domjudge
    runner = unittest.TextTestRunner(stream=NullWriter())
    unittest.main(testRunner=runner, exit=False)